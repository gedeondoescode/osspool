// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  posts         Post[]
  comments      Comment[]

  DateCreated DateTime  @default(now())
  DateUpdated DateTime  @updatedAt
  accounts    Account[]
  sessions    Session[]
  Vote        Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id       String  @id @default(cuid())
  bio      String?
  username String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
}

model Post {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(100)
  content     String
  isPublished Boolean   @default(false)
  vote        Vote[]
  comments    Comment[]
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?

  @@index([authorId])
}

model Comment {
  id        String  @id @default(cuid())
  content   String
  vote      Vote[]
  Profile   User?   @relation(fields: [profileId], references: [id])
  profileId String?
  Post      Post?   @relation(fields: [postId], references: [id])
  postId    String?

  @@index([profileId])
  @@index([postId])
}

enum VoteType {
  like
  dislike
}

model Vote {
  id        String   @id @default(cuid())
  voteType  VoteType
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@index([authorId])
  @@index([postId])
  @@index([commentId])
}
